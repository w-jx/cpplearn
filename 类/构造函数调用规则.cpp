#if 0
#include <iostream>
using namespace std;
/*
#### 4.2.4 构造函数调用规则
默认情况下，c++编译器至少给一个类添加3个函数
1．默认构造函数(无参，函数体为空)
2．默认析构函数(无参，函数体为空)
3．默认拷贝构造函数，对属性进行值拷贝
构造函数调用规则如下：
* 如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造
* 如果用户定义拷贝构造函数，c++不会再提供其他构造函数
相当于优先级  拷贝构造   >     有参构造     > 无参构造
*/
class Person {
public:
	//无参（默认）构造函数
	//Person() {
	//	cout << "无参构造函数!" << endl;
	//}
	//有参构造函数
	//Person(int a) {
	//	age = a;
	//	cout << "有参构造函数!" << endl;
	//}
	//拷贝构造函数
	Person(const Person& p) {
		age = p.age;
		cout << "拷贝构造函数!" << endl;
	}
	//析构函数
	~Person() {
		cout << "析构函数!" << endl;
	}
public:
	int age;
};
//1.注释掉上面拷贝构造,编译器会自动添加拷贝构造,并且做浅拷贝操作
void test01()//
{
	//Person p1(18);
	//Person p2(p1);//不管上面有没有提供拷贝构造函数,都可以进行拷贝操作
	cout << "p2的年龄:" << p2.age << endl;//输出18

}
//2.同时注释拷贝构造和默认构造,只留下有参构造
void test02()//
{
	//用户提供有参构造,编译器不会提供默认构造,会提供拷贝构造
	//Person p1;//因为编译器没有提供默认构造,用户自己也没有提供,那么就会报错,error
	Person p1(10);
	Person p2(p1);//和上面一样,编译器提供了拷贝构造
	cout << "p2的年龄:" << p2.age << endl;//输出18
}
//同时注释默认构造和有参构造,只留下拷贝构造
void test03()//
{
	//Person p1;//用户提供拷贝构造,编译器不会自动提供默认构造,用户自己也没有提供的话,会报错,error
	//Person p2(20);//用户提供拷贝构造,编译器不会自动提供有参构造,用户自己也没有提供的话,会报错,error
}

void test04()//
{

}

void test05()//
{

}

void test06()//
{

}



int main(void)
{

	//test01();////1.注释掉上面拷贝构造,编译器会自动添加拷贝构造,并且做浅拷贝操作
	test02();//2.同时注释拷贝构造和默认构造,只留下有参构造
	//test03();//
	//test04();//
	//test05();//
	//test06();//

	system("pause");
	return 0;

}
#endif